generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                       @id @default(autoincrement())
  email                 String                    @unique @db.VarChar(100)
  password              String                    @db.VarChar(255)
  status                UserStatus                @default(NOT_VERIFIED)
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  profile               Profile?
  tokens                Token[]           
}

model Token {
  userId                Int                       @map("user_id")
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token                 String                    @unique
  type                  TokenType
  expiredAt             DateTime                  @map("expired_at")
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  @@id([userId, type])  
}

enum TokenType {
  REFRESH
  VERIFICATION
  RESET_PASSWORD
}

model Profile {   
  userId                Int                       @id @map("user_id")
  firstname             String                    @db.VarChar(30)
  lastname              String                    @db.VarChar(30)
  birthdate             String?                   @db.VarChar(10)
  gender                ProfileGender?            @default(OTHER) 
  pathPicture           String?                   @map("path_picture") @db.VarChar(255)
  description           String?                   @db.VarChar(2000)
  budget                Budget?       
  availableFrom         DateTime?                 @map("available_from")
  availableTo           DateTime?                 @map("available_to")
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelTypes           ProfileTravelTypes[] 
  lodgings              ProfileLodgings[]         
  interests             ProfileInterests[]        
  languages             ProfileLanguages[]        
  tripDurations         ProfileTripDurations[]    
  notifications         Notification[]        
  medias                Media[]       
  groups                GroupUser[]       
  ratingsGiven          Rating[]                  @relation("RaterUser")
  ratingsReceived       Rating[]                  @relation("RatedUser")
  moderatingsGiven      Moderating[]              @relation("ModeraterUser")
  moderatingsReceived   Moderating[]              @relation("ModeratedUser")
  messagesSent          Message[]                 @relation("SenderUser")
  messagesReceived      Message[]                 @relation("ReceiverUser")
}   

model Stage {   
  id                    Int                       @id @default(autoincrement())
  title                 String                    @db.VarChar(100)
  description           String                    @db.VarChar(2000)
  dateFrom              DateTime                  @map("date_from")
  dateTo                DateTime                  @map("date_to")
  pathPicture           String                    @map("path_picture") @db.VarChar(255)
  address               String                    @db.VarChar(255)
  longitude             Float       
  latitude              Float       
  groupId               Int                       @map("group_id")
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  checklist             Checklist[]   
}   

model Group {   
  id                    Int                       @id @default(autoincrement())
  title                 String                    @db.VarChar(100)
  description           String                    @db.VarChar(2000)
  location              String                    @db.VarChar(255)
  dateFrom              DateTime                  @map("date_from")
  dateTo                DateTime                  @map("date_to") 
  pathPicture           String                    @map("path_picture") @db.VarChar(255)
  status                GroupStatus               @default(PENDING)
  gender                GroupGender?              @default(MIXED)
  budget                Budget?       
  stages                Stage[]       
  travelTypes           GroupTravelTypes[]              
  lodgings              GroupLodgings[]                 
  languages             GroupLanguages[]                
  ageRanges             GroupAgeRanges[]                
  members               GroupUser[]       
  medias                Media[]       
  messagesReceived      Message[]       
  checklist             Checklist[]       
}       

model GroupUser {       
  userId                Int                       @map("user_id")
  groupId               Int                       @map("group_id")
  role                  GroupRole       
  status                GroupUserStatus
  isInvited             Boolean                   @map("is_invited") @default(false)       
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at")  @updatedAt
  user                  Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([userId, groupId])       
}       

model Notification {        
  id                    Int                       @id @default(autoincrement())
  userId                Int                       @map("user_id")
  referenceId           Int                       @map("reference_id")
  referenceType         ReferenceType             @map("reference_type")
  isRead                Boolean                   @default(false) @map("is_read")
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  user                  Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}       

model Media {       
  id                    Int                       @id @default(autoincrement())
  userId                Int                       @map("user_id")
  groupId               Int                       @map("group_id")
  alt                   String                    @db.VarChar(255)
  path                  String                    @unique @db.VarChar(255)
  createdAt             DateTime                  @map("created_at") @default(now())
  user                  Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}       

model Rating {        
  raterId               Int                       @map("rater_id")
  ratedId               Int                       @map("rated_id")
  value                 Int       
  createdAt             DateTime                  @map("created_at") @default(now())
  rater                 Profile                   @relation("RaterUser", fields: [raterId], references: [userId], onDelete: Cascade)
  rated                 Profile                   @relation("RatedUser", fields: [ratedId], references: [userId], onDelete: Cascade)
  @@id([raterId, ratedId])        
}       

model Moderating {        
  moderaterId           Int                       @map("moderater_id")
  moderatedId           Int                       @map("moderated_id")
  value                 Int       
  createdAt             DateTime                  @map("created_at") @default(now())
  moderater             Profile                   @relation("ModeraterUser", fields: [moderaterId], references: [userId], onDelete: Cascade)
  moderated             Profile                   @relation("ModeratedUser", fields: [moderatedId], references: [userId], onDelete: Cascade)
  @@id([moderaterId, moderatedId])        
}       

model Message {       
  id                    Int                       @id @default(autoincrement())
  content               String                    @db.VarChar(1000)
  senderId              Int                       @map("sender_id")
  userReceiverId        Int?                      @map("user_receiver_id")
  groupReceiverId       Int?                      @map("group_receiver_id")
  createdAt             DateTime                  @map("created_at") @default(now())
  senderUser            Profile                   @relation("SenderUser", fields: [senderId], references: [userId], onDelete: Cascade)
  receiverUser          Profile?                  @relation("ReceiverUser", fields: [userReceiverId], references: [userId], onDelete: Cascade)
  receiverGroup         Group?                    @relation(fields: [groupReceiverId], references: [id], onDelete: Cascade)
}       

model Checklist {       
  id                    Int                       @id @default(autoincrement())
  stageId               Int?                      @map("stage_id")
  groupId               Int?                      @map("group_id")
  item                  String                    @db.VarChar(50)
  createdAt             DateTime                  @map("created_at") @default(now())
  updatedAt             DateTime                  @map("updated_at") @updatedAt
  stage                 Stage?                    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  group                 Group?                    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}       

model ProfileTravelTypes {    
  userId                Int                       @map("user_id")
  travelType            TravelTypes
  profile               Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@id([userId, travelType])    
}   

model ProfileLodgings {   
  userId                Int                       @map("user_id")
  lodging               Lodgings
  profile               Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@id([userId, lodging])   
}

model ProfileInterests {    
  userId                Int                       @map("user_id")
  interest              Interests
  profile               Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@id([userId, interest])    
} 

model ProfileLanguages {    
  userId                Int                       @map("user_id")
  language              Languages
  profile               Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@id([userId, language])          
} 

model ProfileTripDurations {            
  userId                Int                       @map("user_id")
  tripDuration          TripDurations
  profile               Profile                   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@id([userId, tripDuration])          
}

model GroupTravelTypes {          
  groupId               Int                       @map("group_id")
  travelType            TravelTypes
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([groupId, travelType])         
}

model GroupLodgings {         
  groupId               Int                       @map("group_id")
  lodging               Lodgings
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([groupId, lodging])          
}
                
model GroupLanguages {          
  groupId               Int                       @map("group_id")
  language              Languages
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([groupId, language])         
}         

model GroupAgeRanges {          
  groupId               Int                       @map("group_id")
  ageRange              AgeRanges
  group                 Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  @@id([groupId, ageRange])
}

enum TravelTypes {
  RELAXATION
  ADVENTURE
  CULTURAL
  HIKING
  BEACH
  GASTRONOMIC 
  ROAD_TRIP
  CRUISE
  FAMILY_TRIP 
  FRIENDS_TRIP
  ECO_FRIENDLY
}

enum Lodgings {
  YOUTH_HOTEL
  HOTEL
  AIRBNB
  CAMPING
  ECOLODGE
  LUXURY
}

enum Interests {
  ADVENTURE_SPORTS 
  CULTURAL_ARTS
  GASTRONOMIC
  NATURE
  WELLNESS
  PARTY
  AMUSEMENT_PARK
  BOARD_GAMES
  TECHNOLOGIES 
  HISTORY 
  WATER_ACTIVITIES 
  SHOPPING 
  FAMILY_ACTIVITIES
}

enum Languages {
  FRENCH
  ENGLISH
  SPANISH
  PORTUGUESE
  ARABIC 
  ITALIAN 
  JAPANESE 
  MANDARIN 
  DEUTSCH 
  DUTCH 
  RUSSIAN 
  HINDI 
  GREEK 
}

enum TripDurations {
  SHORT_TRIP
  MEDIUM_TRIP
  LONG_TRIP
}

enum AgeRanges {
  FIRST_AGE_RANGE 
  SECOND_AGE_RANGE 
  THIRD_AGE_RANGE 
  FOURTH_AGE_RANGE 
}

enum ProfileGender {
  MALE
  FEMALE
  OTHER
}

enum Budget {
  LOW
  MIDDLE
  HIGH
  LUXURY
}

enum UserStatus {
  NOT_VERIFIED
  VERIFIED
  BANNED
}

enum GroupUserStatus {
  PENDING
  ACCEPTED
  DENIED
}

enum GroupStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum GroupRole {
  TRAVELER
  ORGANIZER
  AUTHOR
}

enum GroupGender {
  MALE
  FEMALE
  OTHER
  MIXED
}

enum ReferenceType {
  PRIVATE_MESSAGE
  GROUP_MESSAGE
  GROUP_MODIFICATION
}